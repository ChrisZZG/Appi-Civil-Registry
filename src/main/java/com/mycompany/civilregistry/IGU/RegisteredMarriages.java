/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.civilregistry.IGU;

import com.mycompany.civilregistry.Logica.Controladora;
import com.mycompany.civilregistry.Logica.Husband;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author crist
 */
public class RegisteredMarriages extends javax.swing.JFrame {

    //INSTANCIA GLOBAL DE LA CONTROLADORA
    Controladora control = null;
    
    public RegisteredMarriages() {
        
        control = new Controladora();
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableContent = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnEditMarriage = new javax.swing.JButton();
        btnDeletMarriage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\crist\\OneDrive\\Escritorio\\CivilRegistry\\BannerHorizontal.jpeg")); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\crist\\OneDrive\\Escritorio\\CivilRegistry\\BannerHorizontalInver.jpeg")); // NOI18N

        jLabel1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel1.setText("EXISTENTS REGISTRY");

        tableContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableContent);

        btnExit.setBackground(new java.awt.Color(206, 216, 228));
        btnExit.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnEditMarriage.setBackground(new java.awt.Color(206, 216, 228));
        btnEditMarriage.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnEditMarriage.setForeground(new java.awt.Color(255, 255, 255));
        btnEditMarriage.setText("EDIT MARRIAGE");
        btnEditMarriage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMarriageActionPerformed(evt);
            }
        });

        btnDeletMarriage.setBackground(new java.awt.Color(206, 216, 228));
        btnDeletMarriage.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnDeletMarriage.setForeground(new java.awt.Color(255, 255, 255));
        btnDeletMarriage.setText("DELETE MARRIAGE");
        btnDeletMarriage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletMarriageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnEditMarriage, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(btnDeletMarriage, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditMarriage, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletMarriage, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(347, 347, 347)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // SALIR DE ESTA VENTANA
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnEditMarriageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMarriageActionPerformed
        /*EDITAMOS LA FIALA SELECCIONADA, ALMACENANDO EL ID RELACIONADO EN UNA
        VARIABLE, DEVEMOS TENER EN CUENTA QUE ENTONCES LA FILA DEVE ESTAR 
        SELECCIONADA Y TAMBIEN DEVE EXISTIR EN LA BASE DE DATOS
        */
        
        if(tableContent.getRowCount() > 0){
            if(tableContent.getSelectedRow() !=-1){
                
                int idHusband = Integer.parseInt(String.valueOf(tableContent.getValueAt(tableContent.getSelectedRow(), 0)));
                
                /*LLAMO A UNA INSTANCIA DE LA PANTALLA EDITAR CLIENTE PASANDOLE 
                EL ID CLIENTE SELECCIONADO
                
                */
                EditMarriages edit = new EditMarriages(idHusband);
                edit.setVisible(true);
                edit.setLocationRelativeTo(null);
                
                //CIERRO ESTA VENTANA PARA LLAMARLA LUEGO DE LA EDICION Y SE VEA LA ACTUALIZACION
                this.dispose();
            }else{
                notificacion("NO SELECT ANY ROW", "ERROR", "404 BAD REQUEST");
            }
        }else{
            notificacion("NO DATA IN DATE BASE", "ERROR", "404 BAD REQUEST");
        }
    }//GEN-LAST:event_btnEditMarriageActionPerformed

    private void btnDeletMarriageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletMarriageActionPerformed
        // ELIMINAR UN REGISTRO SELECCIONADO
        if(tableContent.getRowCount() > 0){
            if(tableContent.getSelectedRow() !=-1){
                //EXTRAIGO EL ID A ELIMINAR A PARTIR DE HUSBAND
                int idHusband = Integer.parseInt(String.valueOf(tableContent.getValueAt(tableContent.getSelectedRow(), 0)));
                
                /*A PARTIR DEL IDHUSBAND, CREAR EL METODO EN LA CONTROLADORA
                PARA QUE ME ELIMINE DICHO HUSBAND
                
                */
                control.delete(idHusband);
                
                //NOTIFICACION DE ELIMINACION CORRECTA
                notificacion("DELETE SUSSES", "INFO", "200 OK DELETE SUSSES");
                
                /*UNA VEZ ELIMINADO CORRECTAMENTE LLAMO AL METODO UPDATE TALBE PARA ACTUALIZAR EL
                CONTENIDO CON LO QUE SE ELIMINO
                */
                uploadMarriagesInTable();
                
            }else{
            //MENSAJE DE ERROR POR NO HAY NINGUNA FILA SELECCIONADA
            notificacion("NO SELECTED ANY ROW", "ERROR", "STATE 404 ERROR");
            }
            
        }else{
        //MENSAJE DE ERROR POR NO HABER NINGUN REGISTRO EN LA BASE DE DATOS
        notificacion("NO DATA IN DATE BASE", "ERROR", "STATE 404 ERROR");
        }
        
    }//GEN-LAST:event_btnDeletMarriageActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // LLamo al metodo uploadMarriages
        uploadMarriagesInTable();
        
    }//GEN-LAST:event_formWindowOpened

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletMarriage;
    private javax.swing.JButton btnEditMarriage;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableContent;
    // End of variables declaration//GEN-END:variables

    private void uploadMarriagesInTable() {
        //DEFINIR EL MODELO POR DEFECTO QUE TENDRA LA TABLA 
        DefaultTableModel tableModel = new DefaultTableModel(){
            //Que el cliente no pueda editar por error la tabla
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //ESTABLECER LOS NOMBRES DE LAS COLUMNAS
        String titles[] = {"Id", "Husband Name", "Last Name", "DNI", "Birthday","Wife Name", "Last Name", "DNI", "Birthday"};
        
        //SETTEAR LOS TITULOS EN LA TABLA
        tableModel.setColumnIdentifiers(titles);
        
        /*LEVANTAR LOS DATOS CON LOS QUE VOY A LLENAR LA LISTA DESDE LA BASE DE
        DATOS Y ALMACENARLA EN UNA LISTA
        */
        List<Husband> marriageList = control.getMarriages();
        
        /*RECORRER LA LISTA Y ASIGNAR CADA ELEMENTO A LA TABLA Y COLUMNA 
        CORRESPONDIENTE
        */
        if(marriageList !=null){
            for(Husband marri:marriageList){
                /*ALMACENO LOS DATOS DE CADA MATRIMONIO EN UN OBJETO Y SE LO VOY
                PASANDO A CADA FILA DE LA TABLA PARA Q RELLENE
                */
                Object[] object = {marri.getIdHusband(), marri.getNameHusband(),
                marri.getLastNameHusband(), marri.getDniHusband(), marri.getBirthdateHusband(),
                marri.getWife().getNameWife(), marri.getWife().getLastNameWife(),
                marri.getWife().getDniWife(), marri.getWife().getBirthdateWife()};
                
                tableModel.addRow(object);
                
            }
        }
        
        /*A LA TABLA QUE TENGO EN LA VISTA LE SETTEO TODO LO QUE ALMACENE
        EN TABLE MODEL, QUE SERIAN TODAS LAS FILAS CON LOS DATOS QUE TENGO
        EN LA BASE DE DATOS
        */
        
        tableContent.setModel(tableModel);
        
    }
    
    //METODO PARA LAS NOTIFICACIONES
    
    public void notificacion(String mensaje, String tipoMensaje, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        if(tipoMensaje.equalsIgnoreCase("INFO")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        }else if(tipoMensaje.equalsIgnoreCase("ERROR")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }
    
}
